# -*- coding: utf8 -*-
"""This package contains an implementation of a genetic algorithm.
"""
import random

import wopt.evo
import wopt.utils


class VectorIndividual(wopt.evo.Individual):
    """A class representing the individual as a list of elements.
    """

    def __init__(self, genotype):
        """Creates the individual.

        :param genotype: the genotype, i.e. an iterable of True/False values
            that will form the individual.
        """
        wopt.evo.Individual.__init__(self)

        self.genotype = list(genotype)

    def copy(self, carry_evaluation=True):
        clone = VectorIndividual(self.genotype)

        wopt.evo.Individual.copy_evaluation(self, clone, carry_evaluation)
        return clone


class RandomRealVectorInitializer(wopt.evo.IndividualInitializer):
    """Generates a genotype of a fixed given width with random floating-point
    values from a given distribution.
    """

    def __init__(self, length, distribution, **kwargs):
        """Creates an initializer with given parameters.

        The genotypes generated by the
        :meth:`RandomRealVectorInitializer.initialize` are going to have
        the length of ``length``.

        The optional keyword argument ``generator`` can be used to pass a
        random number generator to the initializer which is to be used for
        generation. If it is ``None`` or not present a standard generator is
        used which is the :mod:`random` module and its functions. If a
        generator is passed it is expected to have the corresponding methods
        to the :mod:`random` module (i.e. the class
        :mod:`random`\\ .Random).

        .. warning::

            If default generator is used (i.e. the methods of
            :mod:`random`) it is assumed that it is already seeded and no seed
            is set inside this class.

        :param int length: length of the genotype
        :param tuple distribution: the type of distribution to draw
            from and its parameters.

            The values of this parameter are expected to be obtained by
            static methods of :class:`wopt.utils.Distribution`.
        :keyword generator: a random number generator; if ``None`` or not
            present calls to the methods of standard python module
            :mod:`random` will be performed instead
        :type generator: :mod:`random`\\ .Random or ``None``
        :return: a randomly generated individual
        :rtype: :class:`VectorIndividual`
        """

        wopt.evo.IndividualInitializer.__init__(self)

        self.length = length
        self.distribution = distribution

        self.generator = random
        if 'generator' in kwargs:
            self.generator = kwargs['generator']

    # noinspection PyUnresolvedReferences
    def initialize(self):
        genotype = [wopt.utils.Distribution.generate(self.distribution,
                                                     self.generator) for _ in
                    range(self.length)]
        return VectorIndividual(genotype)